#!/usr/bin/env python
#
# A helper invoked during doc build to generate an index of all hooks
# into hooks.rst.
#
import os
import textwrap
import inspect

from pubtools.pluggy import pm, task_context

BUILD_DIR = os.path.join(os.path.dirname(__file__), "_build")
HOOKS_OUTPUT = os.path.join(BUILD_DIR, "hooks")
HOOKS_TABLE_OUTPUT = HOOKS_OUTPUT + "-table"

# Modules may be listed here to influence the order in which hooks show
# up in the docs. For example, pubtools built-in hooks should always
# come first. Anything not explicitly listed here will appear towards
# the end of the docs.
#
MODULES = {
    "pubtools": 0,
    "pubtools.pulplib": 10,
}


def dedent(docstr):
    # dedent a doc string to prepare it for embedding in the output.
    #
    # For example, if a hookspec is documented like this:
    #
    #   @hookspec
    #   def emit_frobnitz():
    #       """First line.
    #
    #       And here are some more details."""
    #
    # __doc__ will be "First line.\n\n    And here are some more details."
    #
    # So, the first line may have a different amount of leading whitespace than
    # all other lines which makes it awkward to handle and standard
    # 'textwrap.dedent' will not remove all the leading whitespace.
    #
    # This is a wrapper around textwrap.dedent which can handle this by first
    # ensuring that the first line has the same amount of leading whitespace as
    # the rest.

    try:

        if not docstr.startswith("\n") and not docstr.startswith(" "):
            idx = docstr.index("\n ") + 1

            space_count = 0
            while docstr[idx] == " ":
                space_count += 1
                idx += 1

            docstr = " " * space_count + docstr

    except ValueError:
        pass
    except IndexError:
        pass

    return textwrap.dedent(docstr)


class SpecWrapper:
    # a wrapper around a hookspec adding some utilities

    def __init__(self, hookspec):
        self.hookspec = hookspec

    @property
    def module(self):
        # Public name of the module which provides this hook, e.g.
        # 'pubtools', 'pubtools.quay', etc.
        raw_name = self.hookspec.namespace.__name__

        # For a task library, such as pubtools-quay, a convention is
        # to name the python modules like 'pubtools._quay' to indicate
        # it's not a public API. Problem is that leaves this code with
        # no obvious way how to differentiate "it's pubtools" or "it's
        # a task library" and group them separately.
        #
        # To fix that, we are going to just assume that any 'pubtools._foo'
        # we find (other than the pubtools._impl in *this* repo) can be
        # treated as 'pubtools.foo' for documentation purposes.
        #
        if raw_name.startswith("pubtools._") and not raw_name.startswith(
            "pubtools._impl"
        ):
            raw_name = raw_name.replace("_", "", 1)

        public_name = raw_name.split("._")[0]

        return public_name

    @property
    def library(self):
        # Public name of the library providing this hook, i.e. what do
        # you need to "pip install" in order for this hook to be available.
        #
        # Note this relies strongly on naming conventions, e.g. the fact
        # that python module "pubtools.pulplib" can be found in
        # "pubtools-pulplib". Projects not obeying the conventions could mess
        # things up!

        # If the hook's module has more than two components, we only care
        # about the first two (e.g. pubtools.foo.hooks => pubtools.foo)
        module_start = ".".join(self.module.split(".", 2)[0:2])

        # And here's where the naming convention comes in.
        # If the module is pubtools.foo, it should have come from a library
        # named pubtools-foo. If not, docs will just be wrong.
        return module_start.replace(".", "-")

    @property
    def sort_index(self):
        # Returns a number used when sorting all the hooks.
        #
        # We try to keep hooks in a sensible order in the docs, which means:
        # - put all hooks from the same module together
        # - order the modules according to predefined values (e.g. "pubtools"
        #   should always come first)
        # - then order the hooks by location in the source code (assume that
        #   developer has arranged them in some logical order within a module)
        #
        func = self.hookspec.function
        code = func.__code__
        return (
            MODULES.get(self.module, 9999),
            code.co_filename,
            code.co_firstlineno,
        )

    @property
    def doc(self):
        # Returns a rst-format doc string documenting this hookspec.
        func = self.hookspec.function
        sig = inspect.signature(func)

        out = []
        out.append(f".. py:function:: {func.__name__}{sig}")
        out.append("")

        function_lines = dedent(func.__doc__).splitlines()
        function_lines = ["  " + line for line in function_lines]

        out.extend(function_lines)
        out.extend(["", ""])

        return "\n".join(out)


def hooks_table(hookspecs):
    out = []

    out.extend([".. list-table::", ""])

    out.extend(
        [
            "    * - **Library**",
            "      - **Hook**",
        ]
    )

    for spec in hookspecs:
        out.extend(
            [
                f"    * - ``{spec.library}``",
                f"      - :meth:`{spec.hookspec.function.__name__}`",
            ]
        )

    return "\n".join(out)


def all_hookspecs():
    hooknames = [name for name in dir(pm.hook) if not name.startswith("_")]
    hookspecs = []

    for hookname in hooknames:
        relay = getattr(pm.hook, hookname)
        spec = getattr(relay, "spec", None)
        if spec:
            hookspecs.append(SpecWrapper(spec))

    return sorted(hookspecs, key=lambda spec: spec.sort_index)


def main():
    # We run in task context since it ensures all hooks are loaded.
    with task_context():
        hookspecs = all_hookspecs()

        os.makedirs(BUILD_DIR, exist_ok=True)

        with open(HOOKS_TABLE_OUTPUT, "wt") as out:
            out.write(hooks_table(hookspecs))

        with open(HOOKS_OUTPUT, "wt") as out:
            for spec in hookspecs:
                out.write(spec.doc)


if __name__ == "__main__":
    main()
